---
# tasks file for k8s-addons

# The security group ID for k8s nodes SG has to be known

- name: Create security group for EFS
  ec2_group:
    description: Allow access to EFS NFS volume
    name: "efs.{{ cluster_name }}"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        ports: 2049
        cidr_ip: "{{ vpc_cidr }}"
    state: present
    vpc_id: "{{ vpc_data.vpc.id }}"
  register: efs_sg

- name: Gather facts about the subnet that kops created
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_data.vpc.id }}"
      "tag:KubernetesCluster": "{{ cluster_name }}"
  register: subnet_facts

- name: Create EFS volume
  efs:
    name: "efs.{{ cluster_name }}"
    state: present
    tags:
      name: "{{ cluster_name }}"
    targets:
      - subnet_id: "{{ subnet_facts.subnets[0].subnet_id }}"
        security_groups:
          - "{{ efs_sg.group_id }}"
  register: efs_data

- pause:
    # Wait for k8s cluster to come up (maybe this can be checked more intelligently)
    minutes: 5

- name: Render the template for efs-manifest spec
  template:
    src: efs-manifest.yml.j2
    dest: ./dist/efs-manifest.yml

- name: Apply efs-manifest
  shell: |
    kubectl apply -f ./dist/efs-manifest.yml

- name: Render the template for efs-auth spec
  template:
    src: efs-auth.yml.j2
    dest: ./dist/efs-auth.yml

- name: Apply efs-auth
  shell: |
    kubectl apply -f ./dist/efs-auth.yml

- name: Render the template for efs-auth spec
  template:
    src: cluster-autoscaler.yml.j2
    dest: ./dist/cluster-autoscaler.yml

- name: Install k8s add-ons
  shell: |
    kubectl apply -f ./dist/cluster-autoscaler.yml

- name: Install argo
  shell: |
    argo install

- name: Create role binding 
  shell: |
    kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=default:default

- name: Create secret (S3 IAM account credentials)
  shell: |
    kubectl create secret generic aws-s3 --from-file=./dist/config --from-file=./dist/credentials

- name: Create secret (docker hub credentials)
  shell: |
    kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username={{ docker_user }} --docker-password={{ docker_pass }} --docker-email={{ docker_email }}
