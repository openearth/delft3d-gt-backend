---
# tasks file for django_app

- name: Add django to redis group
  become: yes
  user: state=present
        name={{ app_user }}
        groups={{ redis_user }}
        append=yes

- name: add django static folder
  become: yes
  file: path={{ django_static }}
        state=directory
        mode=0755
        owner=django
        group=django

- name: check if django git exists
  stat: path={{ django_path }}//{{ django_app }}
  register: django_exist

# Clean install -> create -> start celery
- name: add django project folder
  become: yes
  file: path={{ django_path }}
       state=directory
       mode=0755
       owner=django
       group=django
  when: not django_exist.stat.exists

- name: Setup the django git clean
  become: yes
  become_user: django
  git: repo={{ django_git }}
      version="{{ git_branch }}"
      dest={{ django_path }}
      accept_hostkey=yes
  tags: git
  when: not django_exist.stat.exists
  notify: start celery worker

# Folder exists + vagrant is false -> overwrite everything -> restart celery
- name: Setup the django git overwrite
  become: yes
  become_user: django
  git: repo={{ django_git }}
      version="{{ git_branch }}"
      dest={{ django_path }}
      accept_hostkey=yes
      force=yes
      update=yes
  tags: git
  when: django_exist.stat.exists and not vagrant
  notify: restart celery worker


# Folder exists + vagrant is true -> do nothing -> restart celery
- name: restart celery when git exists
  debug: msg='restart celery worker'
  notify: restart celery worker
  changed_when: true  # force handler to run
  when: django_exist.stat.exists and vagrant

# End of conditionals

- name: Install custom provisionedsettings.py to project
  become: yes
  become_user: django
  template: src=../templates/provisionedsettings.py.j2 dest={{ django_path }}/{{ django_app }}/provisionedsettings.py
            mode=0664

- name: Install django app requirements
  become: yes
  become_user: django
  pip:  requirements=requirements.txt
        chdir={{ django_path }}
        extra_args=--upgrade
        virtualenv={{ django_virtualenv }}

- name: Install django app requirements
  become: yes
  become_user: django
  pip:  requirements=test_requirements.txt
        chdir={{ django_path }}
        extra_args=--upgrade
        virtualenv={{ django_virtualenv }}

- name: Migrate db
  become: yes
  become_user: django
  shell: "source {{ django_virtualenv }}/bin/activate; python manage.py migrate chdir={{ django_path }}"

- name: Generate static dir
  become: yes
  become_user: django
  shell: "source {{ django_virtualenv }}/bin/activate; python manage.py collectstatic --noinput chdir={{ django_path }}"
  notify: restart apache

- name: Copy software.zip for viewing result data
  copy: src=software.zip dest={{ django_static }} owner=django group=django mode=0775
  become: yes
  become_method: sudo
