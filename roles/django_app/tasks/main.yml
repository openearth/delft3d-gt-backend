---
# tasks file for django_app

- name: Add django to redis group
  become: yes
  user: state=present
        name={{ app_user }}
        groups={{ redis_user }}
        append=yes
  tags:
    - user

- name: Add docker to django group
  become: yes
  user: state=present
        name=docker
        groups={{ app_user }}
        append=yes
  tags:
    - worker

- name: add django static folder
  become: yes
  file: path={{ django_static }}
        state=directory
        mode=0755
        owner=django
        group=django
  tags:
    - install

- name: check if django git exists
  stat: path={{ django_path }}//{{ django_app }}
  register: django_exist
  tags:
    - worker

# Clean install -> create -> start celery
- name: add django project folder
  become: yes
  file: path={{ django_path }}
       state=directory
       mode=0755
       owner=django
       group=django
  when: not django_exist.stat.exists
  tags:
    - install
    - worker

- name: Setup the django git clean server
  become: yes
  become_user: django
  git: repo={{ django_git }}
      version="{{ git_branch }}"
      dest={{ django_path }}
      accept_hostkey=yes
  when: not django_exist.stat.exists
  notify:
    - start celerybeat worker
  tags:
    - git
    - install

- name: Setup the django git clean manager
  become: yes
  become_user: django
  git: repo={{ django_git }}
      version="{{ git_branch }}"
      dest={{ django_path }}
      accept_hostkey=yes
  when: not django_exist.stat.exists
  notify:
    - start celery worker
  tags:
    - git
    - install
    - worker

# Folder exists + vagrant is false -> overwrite everything -> restart celery
- name: Setup the django git overwrite server
  become: yes
  become_user: django
  git: repo={{ django_git }}
      version="{{ git_branch }}"
      dest={{ django_path }}
      accept_hostkey=yes
      force=yes
      update=yes
  when: django_exist.stat.exists and not vagrant
  notify:
    - restart celerybeat worker
  tags:
    - git
    - install

- name: Setup the django git overwrite manager
  become: yes
  become_user: django
  git: repo={{ django_git }}
      version="{{ git_branch }}"
      dest={{ django_path }}
      accept_hostkey=yes
      force=yes
      update=yes
  when: django_exist.stat.exists and not vagrant
  notify:
    - restart celery worker
  tags:
    - git
    - install
    - worker

- name: install django
  become: yes
  become_user: django
  pip:  requirements={{ requirements_file }}
        extra_args=--upgrade
        virtualenv={{ django_virtualenv }}
  tags:
    - install

- name: install django
  become: yes
  become_user: django
  pip:  requirements={{ worker_requirements_file }}
        extra_args=--upgrade
        virtualenv={{ django_virtualenv }}
  tags:
    - install
    - worker

- name: create ui directory
  become: yes
  file: path=/opt/delft3d-gt/delft3d-gt-ui/dist
        state=directory
        mode=0755
        owner=django
        group=django
  when: not vagrant
  tags:
    - install

- name: download frontend development
  get_url: url=http://build.deltares.nl/guestAuth/repository/download/Delft3DSobek_OssDelft3DGt_Ui_BuildDevelop/.lastSuccessful/delft3d-gt-ui.zip dest=/tmp/delft3d-gt-ui.zip
  become: yes
  when: "'delft3dgt-dev' in group_names or 'delft3dgt-test' in group_names"
  tags:
    - install

- name: download frontend master
  get_url: url=http://build.deltares.nl/guestAuth/repository/download/Delft3DSobek_OssDelft3DGt_Ui_BuildMaster/.lastSuccessful/delft3d-gt-ui-master-.zip dest=/tmp/delft3d-gt-ui.zip
  become: yes
  when: "'delft3dgt-accp' in group_names"
  tags:
    - install

- name: unzip frontend
  unarchive:  src=/tmp/delft3d-gt-ui.zip
              dest=/opt/delft3d-gt/delft3d-gt-ui/dist
              owner=django
              group=django
              mode=0755
              copy=no
  become: yes
  when: not vagrant
  tags:
    - install

- name: delete frontend zip
  file: path=/tmp/delft3d-gt-ui.zip state=absent
  become: yes

# Folder exists + vagrant is true -> do nothing -> restart celery
- name: restart celery when git exists
  debug: msg='restart celery worker'
  notify:
    - restart celery worker
    - restart celerybeat worker
  changed_when: true  # force handler to run
  when: django_exist.stat.exists and vagrant
  tags:
    - service

# End of conditionals

- name: get svn info Last Changed Rev
  command: bash -c "svn info {{ repos_url }} --revision {{ svn_revision }} --username={{ svn_accp_user }} --password={{ svn_accp_pass }} --no-auth-cache | grep 'Last Changed Rev' | awk '{ print $NF }'"
  register: svn_last_changed_rev
  # use async because this command can hang if repos_url/svn_revision combination are invalid
  async: 10
  poll: 5
  tags:
    - configuration
    - worker

- name: redefine svn_revision
  set_fact: svn_revision={{ svn_last_changed_rev.stdout|int }}
  # an empty string or non-integer results in 0, meaning that something went wrong
  failed_when: svn_last_changed_rev.stdout|int == 0
  tags:
    - configuration
    - worker

- name: Install custom delft3dcontainermanager provisionedsettings.py to project
  become: yes
  become_user: django
  template: src=../templates/delft3dcontainermanager_settings.py.j2 dest={{ django_path }}/delft3dcontainermanager/provisionedsettings.py
            mode=0664
  notify:
    - restart celery worker
  tags:
    - configuration
    - worker


- name: Install custom provisionedsettings.py to project
  become: yes
  become_user: django
  template: src=../templates/provisionedsettings.py.j2 dest={{ django_path }}/{{ django_app }}/provisionedsettings.py
            mode=0664
  notify:
    - restart celerybeat worker
  tags:
    - configuration

- name: Set local docker socket for vagrant env
  become: yes
  become_user: django
  replace: dest={{ django_path }}/delft3dcontainermanager/tasks.py regexp='(http:\/\/localhost:4000)' replace='unix:///var/run/docker.sock'
  when: vagrant
  tags:
    - configuration

- name: Install django app requirements
  become: yes
  become_user: django
  pip:  requirements=requirements.txt
        chdir={{ django_path }}
        extra_args=--upgrade
        virtualenv={{ django_virtualenv }}
  tags:
    - install

- name: Install django app Test requirements
  become: yes
  become_user: django
  pip:  requirements=test_requirements.txt
        chdir={{ django_path }}
        extra_args=--upgrade
        virtualenv={{ django_virtualenv }}
  tags:
    - install

- name: Migrate db
  become: yes
  become_user: django
  shell: "source {{ django_virtualenv }}/bin/activate; python manage.py migrate --noinput chdir={{ django_path }}"
  tags:
    - configuration

- name: Load initial user, group and template data in Delft3D-GT db
  become: yes
  become_user: django
  shell: "source {{ django_virtualenv }}/bin/activate; python manage.py loaddata {{ item }}  chdir={{ django_path }}"
  with_items:
    - delft3dgtmain/fixtures/default_users_groups.json
    - delft3dworker/fixtures/default_template.json
  when: ("'delft3dgt-test' in group_names") or ("'delft3dgt-local' in group_names") or ("'delft3dgt-dev' in group_names")
  tags:
    - configuration

- name: Generate static dir
  become: yes
  become_user: django
  shell: "source {{ django_virtualenv }}/bin/activate; python manage.py collectstatic --noinput chdir={{ django_path }}"
  notify: restart apache
  tags:
    - install

# Clean up server every night
# BUGFIX by removing out. Filtering on status
# also removes containers that will be run again
- name: Removed exited docker containers
  become: yes
  cron: name="Remove exited docker containers"
        minute="0"
        hour="1"
        job="docker rm -f $(docker ps -aq -f status=exited) > /dev/null"
        state=absent

- name: Remove orphaned file directories
  become: yes
  cron: name="Removed orphaned file directories"
        minute="0"
        hour="2"
        user="docker"
        job="source {{ django_virtualenv }}/bin/activate; python manage.py cleanup > /dev/null"

- name: make sure celery is started on boot
  become: yes
  service:  name=celery
            state=started
            enabled=yes
  tags:
    - service
    - worker

- name: make sure celerybeat is started on boot
  become: yes
  service:  name=celerybeat
            state=started
            enabled=yes
  tags:
    - service

# Install credentials for s3 bucket

